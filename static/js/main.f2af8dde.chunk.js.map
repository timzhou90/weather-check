{"version":3,"sources":["components/QuickDropDown/QuickDropDown.js","components/TextBoxBar/TextBoxBar.js","components/DisplayTable/DiaplayTable.js","App.js","serviceWorker.js","index.js","keys.js"],"names":["QuickDropDown","handleSubmit","query","setQuery","className","onSubmit","e","value","onChange","target","type","TextBoxBar","search","placeholder","onKeyPress","DisplayTable","weather","main","name","sys","country","d","date","String","window","Date","slice","dateBuild","Math","round","temp","api","key","keys","API_KEY","base","BASE_URL","App","useState","setWeather","checkingImage","fetch","then","res","json","result","event","preventDefault","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f2af8dde.chunk.js","sourcesContent":["import React from 'react';\r\nconst QuickDropDown = ({\r\n    handleSubmit, query, setQuery\r\n})=>(\r\n    <form className=\"dropdown-container\" onSubmit={(e)=>handleSubmit(e)}>\r\n            <label className =\"label-container\">\r\n              Quick pick a city:\r\n              <select className=\"selection-list\" value={query}  onChange={(e) => setQuery(e.target.value)}>\r\n                <option value=\"\">-</option>\r\n                <option value=\"new york\">New York</option>\r\n                <option value=\"los angeles\">Los Angeles</option>\r\n                <option value=\"miami\">Miami</option>\r\n                <option value=\"houston\">Houston</option>\r\n                <option value=\"sydney\">Sydney</option>\r\n                <option value=\"london\">London</option> \r\n                <option value=\"Mumbai\">Mumbai</option>\r\n                <option value=\"shanghai\">Shanghai</option>\r\n              </select>\r\n            </label>\r\n            <input type=\"submit\" value=\"Check\" className=\"check-btn\"/>\r\n          </form>\r\n)\r\n\r\nexport default QuickDropDown\r\n","import React from 'react';\r\n\r\nconst TextBoxBar = ({setQuery, query, search })=>(\r\n\r\n    <input\r\n    type=\"text\"\r\n    placeholder=\"Search...\"\r\n    className=\"search-bar\"\r\n    onChange={(e) => setQuery(e.target.value)}\r\n    value={query}\r\n    onKeyPress={search}\r\n    />)\r\n\r\nexport default TextBoxBar","import React from 'react';\r\n\r\n\r\n\r\nconst DisplayTable = ({weather}) =>{\r\n    const dateBuild = (d) => {\r\n        let date = String(new window.Date());\r\n        date = date.slice(3, 15);\r\n        return date;\r\n      };\r\n   return <>\r\n    {typeof weather.main != \"undefined\" ? (\r\n        <div>\r\n          <div className=\"location-container\">\r\n            <div className=\"location\">\r\n              {weather.name}, {weather.sys.country}\r\n            </div>\r\n            <div className=\"date\"> {dateBuild(new Date())}</div>\r\n          </div>\r\n          <div className=\"weather-container\">\r\n            <div className=\"temperature\">\r\n              {Math.round(weather.main.temp)}Â°C\r\n            </div>\r\n            <div className=\"weather\">{weather.weather[0].main}</div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n}\r\n\r\nexport default DisplayTable;","import React, { useState } from \"react\";\nimport QuickDropDown from \"./components/QuickDropDown/QuickDropDown\";\nimport TextBoxBar from \"./components/TextBoxBar/TextBoxBar\";\nimport DisplayTable from \"./components/DisplayTable/DiaplayTable\";\nimport keys from \"./keys\";\n\n\nconst api = {\n  key: keys.API_KEY,\n  base: keys.BASE_URL,\n};\n\nfunction App() {\n\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  \n  const handleSubmit = (event) => {\n    event.preventDefault()\n    if(query){\n    fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setQuery(query);\n          setWeather(result);\n        });\n      }\n  }\n\n  const search = (e) => {\n    if (query && e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setQuery(query);\n          setWeather(result);\n        });\n    }\n  };\n\n\n  const checkingImage = (weather)=>{\n    const temp =  weather.main.temp\n\n    if(temp > 22){\n      return \"App hot\"\n    }else if(temp<0){\n      return \"App cold\"\n    }else {\n\n\n    }\n    return \"App\"\n  }\n\n\n  return (\n    <>\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? checkingImage(weather)\n          : \"App\"\n      }\n    >\n       \n      <main>\n        <TextBoxBar setQuery={setQuery}  query = {query}  search= {search}/>\n        <div className=\"search-container\">\n        <QuickDropDown handleSubmit= {handleSubmit}  query = {query}  setQuery= {setQuery}/>\n        <DisplayTable weather= {weather} />\n        </div>\n      </main>\n      \n    </div>\n\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\r\n    API_KEY: \"9996418a7de17527cda08e52f567d06a\",\r\n    BASE_URL: \"https://api.openweathermap.org/data/2.5/\",\r\n  };"],"sourceRoot":""}